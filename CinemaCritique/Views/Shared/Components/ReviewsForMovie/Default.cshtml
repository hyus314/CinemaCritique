@using CinemaCritique.Core.Contracts;
@using Microsoft.AspNetCore.Identity;
@model ICollection<MovieReviewViewModel>;
@inject UserManager<CritiqueUser> UserManager
@inject IReviewService Service
@{
    var service = Service;
    var user = await UserManager.GetUserAsync(User);
}
<link rel="stylesheet" href="~/css/review/review.css" asp-append-version="true" />

<div class="review-container">
    @if (Model.Count > 0)
    {

        @foreach (var review in Model)
        {
            <div class="review-card">
                <div class="review-header">
                    <h3>@review.Username</h3>
                    @if (await service.DidUserWriteThisReview(review.ReviewId, user))
                    {
                        <div class="btn-container">
                            <button id="editButton"><i class="fa-regular fa-pen-to-square"></i></button>
                            <button id="removeButton"><i class="fa-solid fa-trash"></i></button>
                        </div>
                    }
                    <span>@review.DatePublished</span>
                </div>
                <div class="review-content">
                    <p>@review.Content</p>
                </div>
                <div class="review-footer">
                    <div class="rating-review" data-rating="@review.Rating">
                        <span>☆</span><span>☆</span><span>☆</span><span>☆</span><span>☆</span>
                        <span>☆</span><span>☆</span><span>☆</span><span>☆</span><span>☆</span>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <h3 class="no-reviews-message">This film has not been reviewed yet! Be the first to leave a review.</h3>
    }
</div>